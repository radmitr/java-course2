package regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/* ------------------------ 10. Регулярные выражения ----------------------------- */
/* 1. RegEx. Часть 1 */
    // 2nd class
/* 3. RegEx. Часть 3 */
    // 1st class
/**
    ---------------------
     REGular EXpressions
    ---------------------
    Регулярные выражения необходимы для создания шаблонов, с помощью которых
    производят такие операции, как поиск, сравнение, замена.

    Регулярные выражения - это совокупность символов, некоторые из которых являются
    специальными - метасимволами, т.е. обладают каким-то функционалом.

    ------------------------------------
     Часто используемые символы в REGEX
    ------------------------------------
    abc – Соответствует последовательно идущим abc
    [abc] – Соответствуетили a, или b, или c
    [d-j] – Соответствует одной из букв из диапазона d-j
    [3-8] – Соответствует одной из цифр из диапазона 3-8
    [B-Fd-j3-8] – Соответствуетодной из букв из обоих диапазонов или одной из цифр из диапазона 3-8
    a|b – Соответствуетлибо букве a, либо букве b
    [^d-j] – Данный символ, стоящий в начале этих скобок, означает отрицание. Соответствует одной
             из букв НЕ из диапазона d-j
    . – Соответствует одному любому символу. Исключение: символ новой строки
    ^выражение – Соответствует выражению в начале строки
    выражение$ – Соответствуетвыражению в конце строки

    ----------------------------------------
     Часто используемые МЕТАсимволы в REGEX
    ----------------------------------------
    \d – Соответствуетодной цифре
    \D – Соответствуетодной НЕ цифре
    \w – Соответствуетодной букве, цифре или «_»
    \W – Соответствуетодному символу, который НЕ буква, НЕ цифра и НЕ «_»
    \s – Соответствует пробельному символу
    \S – Соответствует НЕ пробельному символу
    \A – Соответствует выражению в начале String-а
    \Z – Соответствует выражению в конце String-а
    \b – Соответствует границе слова или числа
    \B – Соответствует границе НЕ слова и НЕ числа

    ------------------------------------------------------------------------
     Часто используемые символы в REGEX, обозначающие количество повторений
    ------------------------------------------------------------------------
    выражение? – Соответствует 0 или 1 повторению
    выражение* – Соответствует 0 или большему количеству повторений
    выражение+ – Соответствует 1 или большему количеству повторений
    выражение{n} – Соответствует количеству повторений «n»
    выражение{m, n} – Соответствует количеству повторений от «m» до «n»
    выражение{n,} – Соответствует n или большему количеству повторений

    --------------------------
     Классы Pattern и Matcher
    --------------------------
    Pattern myPattern = Pattern.compile(«REGEX");
    Matcher myMatcher = myPattern.matcher(myString);

    Пакет: java.util.regex
*/
public class Regex1 {

    public static void main(String[] args) {
        String s = "Ivanov Vasiliy, Russia, Moscow, Lenin Street, 51, Flat 48, " +
                "email: vivanov@mail.ru, Postcode: AA99, Phone Number: +123456789;"
                + "Petrova Mariya, Ukraine, Kiyev, Lomonosov street, 33, flat 18," +
                "email: masha@yandex.ru, Postcode: UKR54, Phone Number: +987654321;"
                + "Chuck Norris, USA, Hollywood, All stars street, 87, flat 21," +
                "email: chuck@gmail.com, Postcode: USA23, Phone Number: +136478952.";

        // 1 - all words and numbers
//        Pattern pattern = Pattern.compile("\\w+");
        // 2.1 - street and flat number
//        Pattern pattern = Pattern.compile("\\d{2}"); // not exactly
        // 2.2 - street and flat number
//        Pattern pattern = Pattern.compile("\\b\\d{2}\\b");
        // 3 - phone
//        Pattern pattern = Pattern.compile("\\+\\d{9}");
        // 4 - email
        Pattern pattern = Pattern.compile("\\w+@\\w+\\.(com|ru)");

        Matcher matcher  = pattern.matcher(s);

        while (matcher.find()) {
            System.out.println(matcher.group());
        }
    }
}
